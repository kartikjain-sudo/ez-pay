// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChangeRequested extends ethereum.Event {
  get params(): ChangeRequested__Params {
    return new ChangeRequested__Params(this);
  }
}

export class ChangeRequested__Params {
  _event: ChangeRequested;

  constructor(event: ChangeRequested) {
    this._event = event;
  }

  get lender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get notificationToLender(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class ClaimTokens extends ethereum.Event {
  get params(): ClaimTokens__Params {
    return new ClaimTokens__Params(this);
  }
}

export class ClaimTokens__Params {
  _event: ClaimTokens;

  constructor(event: ClaimTokens) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class CollateralWithdrawn extends ethereum.Event {
  get params(): CollateralWithdrawn__Params {
    return new CollateralWithdrawn__Params(this);
  }
}

export class CollateralWithdrawn__Params {
  _event: CollateralWithdrawn;

  constructor(event: CollateralWithdrawn) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EMIPaid extends ethereum.Event {
  get params(): EMIPaid__Params {
    return new EMIPaid__Params(this);
  }
}

export class EMIPaid__Params {
  _event: EMIPaid;

  constructor(event: EMIPaid) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Liquidated extends ethereum.Event {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get lender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanRequested extends ethereum.Event {
  get params(): LoanRequested__Params {
    return new LoanRequested__Params(this);
  }
}

export class LoanRequested__Params {
  _event: LoanRequested;

  constructor(event: LoanRequested) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get id(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class LoanTransferred extends ethereum.Event {
  get params(): LoanTransferred__Params {
    return new LoanTransferred__Params(this);
  }
}

export class LoanTransferred__Params {
  _event: LoanTransferred;

  constructor(event: LoanTransferred) {
    this._event = event;
  }

  get lender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RequestAccepted extends ethereum.Event {
  get params(): RequestAccepted__Params {
    return new RequestAccepted__Params(this);
  }
}

export class RequestAccepted__Params {
  _event: RequestAccepted;

  constructor(event: RequestAccepted) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EzPay__amountPaidResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: BigInt;
  value5: i32;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: BigInt,
    value5: i32,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getPrinciple(): BigInt {
    return this.value0;
  }

  getInterest(): BigInt {
    return this.value1;
  }

  getEmiAmount(): BigInt {
    return this.value2;
  }

  getTotalMonths(): i32 {
    return this.value3;
  }

  getEmiPaid(): BigInt {
    return this.value4;
  }

  getMonthsPaid(): i32 {
    return this.value5;
  }

  getNextDate(): BigInt {
    return this.value6;
  }
}

export class EzPay__changesResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getChangeRequester(): Address {
    return this.value0;
  }

  getChangeRequestTo(): Address {
    return this.value1;
  }

  getTimePeriod(): BigInt {
    return this.value2;
  }

  getCollateralToken(): Address {
    return this.value3;
  }

  getPaymentToken(): Address {
    return this.value4;
  }

  getInterestRate(): BigInt {
    return this.value5;
  }

  getPaymentTokenAmount(): BigInt {
    return this.value6;
  }

  getCollateralTokenAmount(): BigInt {
    return this.value7;
  }
}

export class EzPay__finalApprovalResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getApprovedBy(): Address {
    return this.value0;
  }

  getNeedApprovalFrom(): Address {
    return this.value1;
  }

  getTimePeriod(): BigInt {
    return this.value2;
  }

  getCollateralToken(): Address {
    return this.value3;
  }

  getPaymentToken(): Address {
    return this.value4;
  }

  getInterestRate(): BigInt {
    return this.value5;
  }

  getPaymentTokenAmount(): BigInt {
    return this.value6;
  }

  getCollateralTokenAmount(): BigInt {
    return this.value7;
  }

  getPaidPaymentToken(): boolean {
    return this.value8;
  }
}

export class EzPay__installmentsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;
  value6: BigInt;
  value7: boolean;
  value8: boolean;
  value9: boolean;
  value10: Address;
  value11: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address,
    value6: BigInt,
    value7: boolean,
    value8: boolean,
    value9: boolean,
    value10: Address,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getLender(): Address {
    return this.value0;
  }

  getTimePeriod(): BigInt {
    return this.value1;
  }

  getStartDate(): BigInt {
    return this.value2;
  }

  getInterestRate(): BigInt {
    return this.value3;
  }

  getBorrower(): Address {
    return this.value4;
  }

  getCollateralToken(): Address {
    return this.value5;
  }

  getCollateralAmount(): BigInt {
    return this.value6;
  }

  getPaymentFinalised(): boolean {
    return this.value7;
  }

  getCollateralWithdrawn(): boolean {
    return this.value8;
  }

  getBorrowerDefaulted(): boolean {
    return this.value9;
  }

  getPaymentToken(): Address {
    return this.value10;
  }

  getPaymentTokenAmount(): BigInt {
    return this.value11;
  }
}

export class EzPay__requestsResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getUser(): Address {
    return this.value0;
  }

  getTimePeriod(): BigInt {
    return this.value1;
  }

  getCollateralToken(): Address {
    return this.value2;
  }

  getPaymentToken(): Address {
    return this.value3;
  }

  getIsBorrower(): boolean {
    return this.value4;
  }

  getInterestRate(): BigInt {
    return this.value5;
  }

  getPaymentTokenAmount(): BigInt {
    return this.value6;
  }

  getCollateralTokenAmount(): BigInt {
    return this.value7;
  }

  getCompleted(): boolean {
    return this.value8;
  }
}

export class EzPay__unclaimedTokensResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getUser(): Address {
    return this.value0;
  }

  getToken(): Address {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getTimestamp(): BigInt {
    return this.value3;
  }
}

export class EzPay extends ethereum.SmartContract {
  static bind(address: Address): EzPay {
    return new EzPay("EzPay", address);
  }

  amountPaid(param0: Bytes): EzPay__amountPaidResult {
    let result = super.call(
      "amountPaid",
      "amountPaid(bytes32):(uint256,uint256,uint256,uint16,uint256,uint16,uint48)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new EzPay__amountPaidResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toBigInt()
    );
  }

  try_amountPaid(param0: Bytes): ethereum.CallResult<EzPay__amountPaidResult> {
    let result = super.tryCall(
      "amountPaid",
      "amountPaid(bytes32):(uint256,uint256,uint256,uint16,uint256,uint16,uint48)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EzPay__amountPaidResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toBigInt()
      )
    );
  }

  changes(param0: Bytes, param1: BigInt): EzPay__changesResult {
    let result = super.call(
      "changes",
      "changes(bytes32,uint256):(address,address,uint48,address,address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new EzPay__changesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_changes(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<EzPay__changesResult> {
    let result = super.tryCall(
      "changes",
      "changes(bytes32,uint256):(address,address,uint48,address,address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EzPay__changesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  finalApproval(
    param0: Bytes,
    param1: Address,
    param2: BigInt
  ): EzPay__finalApprovalResult {
    let result = super.call(
      "finalApproval",
      "finalApproval(bytes32,address,uint256):(address,address,uint48,address,address,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new EzPay__finalApprovalResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try_finalApproval(
    param0: Bytes,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<EzPay__finalApprovalResult> {
    let result = super.tryCall(
      "finalApproval",
      "finalApproval(bytes32,address,uint256):(address,address,uint48,address,address,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EzPay__finalApprovalResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }

  installments(param0: Bytes): EzPay__installmentsResult {
    let result = super.call(
      "installments",
      "installments(bytes32):(address,uint48,uint48,uint256,address,address,uint256,bool,bool,bool,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new EzPay__installmentsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBoolean(),
      result[9].toBoolean(),
      result[10].toAddress(),
      result[11].toBigInt()
    );
  }

  try_installments(
    param0: Bytes
  ): ethereum.CallResult<EzPay__installmentsResult> {
    let result = super.tryCall(
      "installments",
      "installments(bytes32):(address,uint48,uint48,uint256,address,address,uint256,bool,bool,bool,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EzPay__installmentsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBoolean(),
        value[9].toBoolean(),
        value[10].toAddress(),
        value[11].toBigInt()
      )
    );
  }

  interestedUsers(param0: Bytes, param1: Address): BigInt {
    let result = super.call(
      "interestedUsers",
      "interestedUsers(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_interestedUsers(
    param0: Bytes,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestedUsers",
      "interestedUsers(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanGiven(param0: Address, param1: BigInt): Bytes {
    let result = super.call(
      "loanGiven",
      "loanGiven(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_loanGiven(param0: Address, param1: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "loanGiven",
      "loanGiven(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  loans(param0: BigInt): Bytes {
    let result = super.call("loans", "loans(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_loans(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("loans", "loans(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  repliesToUsers(param0: Bytes, param1: Address): BigInt {
    let result = super.call(
      "repliesToUsers",
      "repliesToUsers(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_repliesToUsers(
    param0: Bytes,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repliesToUsers",
      "repliesToUsers(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requests(param0: Bytes): EzPay__requestsResult {
    let result = super.call(
      "requests",
      "requests(bytes32):(address,uint48,address,address,bool,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new EzPay__requestsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try_requests(param0: Bytes): ethereum.CallResult<EzPay__requestsResult> {
    let result = super.tryCall(
      "requests",
      "requests(bytes32):(address,uint48,address,address,bool,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EzPay__requestsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }

  unclaimedTokens(param0: Bytes): EzPay__unclaimedTokensResult {
    let result = super.call(
      "unclaimedTokens",
      "unclaimedTokens(bytes32):(address,address,uint256,uint48)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new EzPay__unclaimedTokensResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_unclaimedTokens(
    param0: Bytes
  ): ethereum.CallResult<EzPay__unclaimedTokensResult> {
    let result = super.tryCall(
      "unclaimedTokens",
      "unclaimedTokens(bytes32):(address,address,uint256,uint48)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EzPay__unclaimedTokensResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  userLoans(param0: Address, param1: BigInt): Bytes {
    let result = super.call(
      "userLoans",
      "userLoans(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_userLoans(param0: Address, param1: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "userLoans",
      "userLoans(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class AcceptRequestCall extends ethereum.Call {
  get inputs(): AcceptRequestCall__Inputs {
    return new AcceptRequestCall__Inputs(this);
  }

  get outputs(): AcceptRequestCall__Outputs {
    return new AcceptRequestCall__Outputs(this);
  }
}

export class AcceptRequestCall__Inputs {
  _call: AcceptRequestCall;

  constructor(call: AcceptRequestCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get requestNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AcceptRequestCall__Outputs {
  _call: AcceptRequestCall;

  constructor(call: AcceptRequestCall) {
    this._call = call;
  }
}

export class ClaimBackTokensCall extends ethereum.Call {
  get inputs(): ClaimBackTokensCall__Inputs {
    return new ClaimBackTokensCall__Inputs(this);
  }

  get outputs(): ClaimBackTokensCall__Outputs {
    return new ClaimBackTokensCall__Outputs(this);
  }
}

export class ClaimBackTokensCall__Inputs {
  _call: ClaimBackTokensCall;

  constructor(call: ClaimBackTokensCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ClaimBackTokensCall__Outputs {
  _call: ClaimBackTokensCall;

  constructor(call: ClaimBackTokensCall) {
    this._call = call;
  }
}

export class CreateRequestCall extends ethereum.Call {
  get inputs(): CreateRequestCall__Inputs {
    return new CreateRequestCall__Inputs(this);
  }

  get outputs(): CreateRequestCall__Outputs {
    return new CreateRequestCall__Outputs(this);
  }
}

export class CreateRequestCall__Inputs {
  _call: CreateRequestCall;

  constructor(call: CreateRequestCall) {
    this._call = call;
  }

  get collateralToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get paymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get requiredAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get timePeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get isLoanRequest(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get collateralTokenAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateRequestCall__Outputs {
  _call: CreateRequestCall;

  constructor(call: CreateRequestCall) {
    this._call = call;
  }
}

export class InitiateEMICall extends ethereum.Call {
  get inputs(): InitiateEMICall__Inputs {
    return new InitiateEMICall__Inputs(this);
  }

  get outputs(): InitiateEMICall__Outputs {
    return new InitiateEMICall__Outputs(this);
  }
}

export class InitiateEMICall__Inputs {
  _call: InitiateEMICall;

  constructor(call: InitiateEMICall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get finalRequestIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitiateEMICall__Outputs {
  _call: InitiateEMICall;

  constructor(call: InitiateEMICall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class RepayEMICall extends ethereum.Call {
  get inputs(): RepayEMICall__Inputs {
    return new RepayEMICall__Inputs(this);
  }

  get outputs(): RepayEMICall__Outputs {
    return new RepayEMICall__Outputs(this);
  }
}

export class RepayEMICall__Inputs {
  _call: RepayEMICall;

  constructor(call: RepayEMICall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RepayEMICall__Outputs {
  _call: RepayEMICall;

  constructor(call: RepayEMICall) {
    this._call = call;
  }
}

export class RequestChangesCall extends ethereum.Call {
  get inputs(): RequestChangesCall__Inputs {
    return new RequestChangesCall__Inputs(this);
  }

  get outputs(): RequestChangesCall__Outputs {
    return new RequestChangesCall__Outputs(this);
  }
}

export class RequestChangesCall__Inputs {
  _call: RequestChangesCall;

  constructor(call: RequestChangesCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get changeRequestTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get timePeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get collateralToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get paymentToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get interestRate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get paymentTokenAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get collateralTokenAmount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class RequestChangesCall__Outputs {
  _call: RequestChangesCall;

  constructor(call: RequestChangesCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCall extends ethereum.Call {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }
}
